package lib

import (
	"fmt"
	"strings"
	"time"
)

var (
	ENCODE = []uint8{
		'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
		'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
		'k', 'm', 'n', 'p', 'r', 't', 'y', 'A', 'B', 'C',
		'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N',
		'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
	}
	DECODE = []uint8{
		0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x00, 0x23, 0x24, 0x25, 0x26, 0x27, 0x00,
		0x00, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x00, 0x15, 0x16, 0x00,
		0x17, 0x00, 0x18, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
)

var (
	BASE int64 = 50

	TM_YEAR_START int64 = 2022

	// TIM_BIT_SIZE uint32 = 32
	YEAR_BIT_SIZE  uint32 = 5
	MONTH_BIT_SIZE uint32 = 4
	DAY_BIT_SIZE   uint32 = 5
	SEQ_BIT_SIZE   uint32 = 18

	MAX_YAER     uint32 = (1 << YEAR_BIT_SIZE) - 1
	MAX_MONTH    uint32 = (1 << MONTH_BIT_SIZE) - 1
	MAX_DAY      uint32 = (1 << DAY_BIT_SIZE) - 1
	MAX_SEQUENCE uint32 = (1 << SEQ_BIT_SIZE) - 1

	// HOUR_MASK uint64 = uint64(MAX_HOUR) << (MONTH_BIT_SIZE + DAY_BIT_SIZE + SEQ_BIT_SIZE)
	YAER_MASK     uint64 = uint64(MAX_YAER) << (MONTH_BIT_SIZE + DAY_BIT_SIZE + SEQ_BIT_SIZE)
	MONTH_MASK    uint64 = uint64(MAX_MONTH) << (DAY_BIT_SIZE + SEQ_BIT_SIZE)
	DAY_MASK      uint64 = uint64(MAX_DAY) << SEQ_BIT_SIZE
	SEQUENCE_MASK uint64 = uint64(MAX_SEQUENCE)
)

// 生成会员ID
func GenCardId() (int64, error) {
	now := time.Now()
	seq, err := IncrRegCount(now)
	if err != nil {
		return 0, err
	}
	if seq > int64(MAX_SEQUENCE) {
		return 0, fmt.Errorf("generate card id error: seq %d is too big", seq)
	}

	year, month, day := time.Now().Date()

	var cid int64 = 1
	cid = cid<<YEAR_BIT_SIZE + int64(year) - TM_YEAR_START
	cid = cid<<MONTH_BIT_SIZE + int64(month)
	cid = cid<<DAY_BIT_SIZE + int64(day)
	cid = cid<<SEQ_BIT_SIZE + int64(seq)

	return cid, nil
}

func ToCardStr(idd int64) string {
	var result strings.Builder
	for idd > 0 {
		result.WriteString(string(ENCODE[idd%BASE]))
		idd /= BASE
	}
	return result.String()
}
